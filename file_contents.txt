FILE: C:/Users/lucas/Projects/calgary-transit-app/components/AuthScreen.tsx
---
import React, { useState } from 'react';
import { View, TextInput, Button, Text, StyleSheet } from 'react-native';
import { createUserWithEmailAndPassword, signInWithEmailAndPassword } from '@firebase/auth';
import { auth } from '../firebaseConfig';
import { NativeStackNavigationProp } from '@react-navigation/native-stack';
import { Alert } from 'react-native';

// Define the navigation types
type RootStackParamList = {
    Auth: undefined;
    Map: undefined;
};

type AuthScreenNavigationProp = NativeStackNavigationProp<RootStackParamList, 'Auth'>;

interface AuthScreenProps {
    navigation: AuthScreenNavigationProp;
}

const AuthScreen = ({ navigation }: AuthScreenProps) => {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');

    const handleSignUp = async () => {
        if (!email || !password) {
            Alert.alert('Please enter both email and password');
            return;
        }

        try {
            console.log('Attempting to sign up with:', { email }); // Don't log passwords
            const userCredential = await createUserWithEmailAndPassword(auth, email, password);
            console.log('Sign up successful:', userCredential.user.uid);
            Alert.alert('User registered successfully!');
            navigation.navigate('Map'); // Changed from replace to navigate
        } catch (error: any) {
            console.error('Sign up error:', error.code, error.message);
            Alert.alert(`Sign up error: ${error.code}\n${error.message}`);
        }
    };

    const handleLogin = async () => {
        if (!email || !password) {
            Alert.alert('Please enter both email and password');
            return;
        }

        try {
            console.log('Attempting to log in with:', { email }); // Don't log passwords
            const userCredential = await signInWithEmailAndPassword(auth, email, password);
            console.log('Login successful:', userCredential.user.uid);
            Alert.alert('User logged in successfully!');
            navigation.navigate('Map'); // Changed from replace to navigate
        } catch (error: any) {
            console.error('Login error:', error.code, error.message);
            Alert.alert(`Login error: ${error.code}\n${error.message}`);
        }
    };

    return (
        <View style={styles.container}>
            <TextInput
                style={styles.input}
                placeholder="Email"
                value={email}
                onChangeText={setEmail}
                keyboardType="email-address"
                autoCapitalize="none"
            />
            <TextInput
                style={styles.input}
                placeholder="Password"
                value={password}
                onChangeText={setPassword}
                secureTextEntry
            />
            <View style={styles.buttonContainer}>
                <Button title="Sign Up" onPress={handleSignUp} />
                <Button title="Login" onPress={handleLogin} />
            </View>
        </View>
    );
};

const styles = StyleSheet.create({
    container: {
        flex: 1,
        justifyContent: 'center',
        padding: 20,
    },
    input: {
        height: 40,
        borderColor: 'gray',
        borderWidth: 1,
        marginBottom: 10,
        paddingHorizontal: 10,
        borderRadius: 5,
    },
    buttonContainer: {
        flexDirection: 'row',
        justifyContent: 'space-around',
        marginTop: 10,
    },
});

export default AuthScreen;
---

FILE: C:/Users/lucas/Projects/calgary-transit-app/components/icons/TransitIcons.tsx
---
import React from 'react';
import Svg, { Path, G } from 'react-native-svg';

interface IconProps {
    size?: number;
    color?: string;
}

export const BusIcon: React.FC<IconProps> = ({ size = 48, color = '#FF0000' }) => (
    <Svg width={size} height={size} viewBox="0 0 64 64">
        <Path
            fill={color}
            d="M52,0H12C5.375,0,0,5.371,0,12v40c0,2.211,1.789,4,4,4h4v4c0,2.211,1.789,4,4,4h4c2.211,0,4-1.789,4-4v-4h24v4c0,2.211,1.789,4,4,4h4c2.211,0,4-1.789,4-4v-4h4c2.211,0,4-1.789,4-4V12C64,5.375,58.629,0,52,0z M16,44c-2.211,0-4-1.789-4-4s1.789-4,4-4s4,1.789,4,4S18.211,44,16,44z M48,44c-2.211,0-4-1.789-4-4s1.789-4,4-4s4,1.789,4,4S50.211,44,48,44z M56,24H8V12c0-2.211,1.789-4,4-4h40c2.211,0,4,1.789,4,4V24z"
        />
    </Svg>
);

export const TrainIcon: React.FC<IconProps> = ({ size = 48, color = '#0000FF' }) => (
    <Svg width={size} height={size} viewBox="0 0 512 512">
        <G>
            <Path
                fill={color}
                d="M437.575,351.629V89.868C437.575,40.233,397.351,0,347.707,0H164.293c-49.625,0-89.868,40.233-89.868,89.868v261.761c0,37.628,27.383,68.98,63.269,75.221L81.334,512h50.11l23.132-34.961h202.867L380.574,512h50.101l-56.35-85.15C410.201,420.601,437.575,389.257,437.575,351.629z M178.182,40.348h155.636v25.94H178.182V40.348z M131.355,124.186c0-11.284,9.137-20.438,20.421-20.438h208.456c11.276,0,20.429,9.154,20.429,20.438v86.206c0,11.284-9.154,20.429-20.429,20.429H151.777c-11.284,0-20.421-9.145-20.421-20.429V124.186z M150.808,374.004c-13.158,0-23.826-10.668-23.826-23.818c0-13.167,10.668-23.836,23.826-23.836c13.159,0,23.827,10.668,23.827,23.836C174.635,363.336,163.967,374.004,150.808,374.004z M169.618,454.312l17.41-26.318h137.953l17.41,26.318H169.618z M361.201,374.004c-13.158,0-23.826-10.668-23.826-23.818c0-13.167,10.668-23.836,23.826-23.836c13.159,0,23.827,10.668,23.827,23.836C385.028,363.336,374.36,374.004,361.201,374.004z"
            />
        </G>
    </Svg>
);

export const HandicapBusIcon: React.FC<IconProps> = ({ size = 48, color = '#008000' }) => (
    <Svg height={size} width={size} viewBox="0 0 48 48">
        <Path
            fill={color}
            d="M24 42q-3.75 0-7.025-1.4-3.275-1.4-5.725-3.85Q8.8 34.3 7.4 31.025 6 27.75 6 24t1.4-7.025q1.4-3.275 3.85-5.725 2.45-2.45 5.725-3.85Q20.25 6 24 6q3.75 0 7.025 1.4 3.275 1.4 5.725 3.85 2.45 2.45 3.85 5.725Q42 20.25 42 24t-1.4 7.025q-1.4 3.275-3.85 5.725-2.45 2.45-5.725 3.85Q27.75 42 24 42Zm-2.25-4.5v-4.1q-1.75 0-2.875-1.125T17.75 29.4V25h-4.1v-3h7.1v7.4h4.5V16.6h-7.5V14q0-1.75 1.125-2.875T21.75 10q1.75 0 2.875 1.125T25.75 14v16.4q1.75 0 2.875 1.125T29.75 34.4v3.1Z"
        />
    </Svg>
);
---

FILE: C:/Users/lucas/Projects/calgary-transit-app/components/map/components/ClusterMarkers.tsx
---
// components/map/components/ClusterMarkers.tsx
import React from 'react';
import { Marker } from 'react-native-maps';
import VehicleMarker from '../../markers/VehicleMarker';
import { ClusterView } from './ClusterView';
import type { Cluster } from '../types';
import { Vehicle } from '@/types/vehicles';

interface ClusterMarkersProps {
  clusters: Cluster[];
  onVehicleSelect: (vehicle: Vehicle) => void;
  selectedVehicle: Vehicle | null;
  activeRouteId: string | undefined | null;
  isLoadingRoute: boolean;
}

export const ClusterMarkers: React.FC<ClusterMarkersProps> = ({ 
  clusters, 
  onVehicleSelect, 
  selectedVehicle, 
  activeRouteId,
  isLoadingRoute 
}) => {
  // Determine if any vehicle is selected
  const isVehicleSelected = selectedVehicle !== null;

  return (
    <>
      {clusters.map(cluster => (
        cluster.numPoints === 1 ? (
          <VehicleMarker 
            key={cluster.points[0].vehicle.id} 
            vehicle={cluster.points[0].vehicle} 
            onSelect={onVehicleSelect}
            isSelected={selectedVehicle?.id === cluster.points[0].vehicle.id}
            isOnSelectedRoute={activeRouteId ? cluster.points[0].vehicle.routeId === activeRouteId : undefined}
            isLoading={isLoadingRoute && selectedVehicle?.id === cluster.points[0].vehicle.id}
            isAnyVehicleLoading={isLoadingRoute} 
          />
        ) : (
          <Marker key={cluster.id} coordinate={cluster.coordinate}>
            <ClusterView 
              cluster={cluster} 
              isVehicleSelected={isVehicleSelected} 
            />
          </Marker>
        )
      ))}
    </>
  );
};
---

FILE: C:/Users/lucas/Projects/calgary-transit-app/components/map/components/ClusterView.tsx
---
// components/map/components/ClusterView.tsx
import React from 'react';
import { View, Text } from 'react-native';
import { clusterStyles } from '../styles';
import type { Cluster } from '../types';

interface ClusterViewProps {
  cluster: Cluster;
  isVehicleSelected: boolean; // Add this prop
}

export const ClusterView: React.FC<ClusterViewProps> = ({ cluster, isVehicleSelected }) => {
  // const size = Math.min(40 + (cluster.numPoints * 3), 70);
  const size = 30;
  const borderRadius = size / 2;
  
  // Determine style based on selection state
  const backgroundColor = isVehicleSelected ? '#FF6666' : '#FF0000';
  const opacity = isVehicleSelected ? 0.5 : 0.8;

  return (
    <View style={[
      clusterStyles.clusterContainer,
      {
        width: size,
        height: size,
        borderRadius: borderRadius,
        backgroundColor, // Apply dynamic background color
        opacity, // Apply dynamic opacity
        // Add these to ensure proper centering
        // position: 'relative',
        // left: -size / 2,
        // top: -size / 2,
      }
    ]}>
      <Text style={clusterStyles.clusterText}>
        {cluster.numPoints}
      </Text>
    </View>
  );
};
---

FILE: C:/Users/lucas/Projects/calgary-transit-app/components/map/components/ErrorDisplay.tsx
---
// components/map/components/ErrorDisplay.tsx
import React from 'react';
import { Text } from 'react-native';
import { styles } from '../styles';

interface ErrorDisplayProps {
  locationError: string | null | undefined;
  transitError?: string | null;
}

export const ErrorDisplay: React.FC<ErrorDisplayProps> = ({ 
  locationError, 
  transitError 
}) => {
  if (!locationError && !transitError) return null;
  
  return (
    <Text style={styles.errorText}>
      {locationError || transitError}
    </Text>
  );
};
---

FILE: C:/Users/lucas/Projects/calgary-transit-app/components/map/components/RouteShape.tsx
---
// components/map/components/RouteShape.tsx
import React from 'react';
import { Polyline } from 'react-native-maps';

interface RouteShapeProps {
  coordinates: number[][][];
  routeId: string | undefined;
}

export const RouteShape: React.FC<RouteShapeProps> = ({ coordinates, routeId }) => {
  return (
    <>
      {coordinates.map((lineString, index) => (
        <Polyline
          key={`${routeId}-${index}`}
          coordinates={lineString.map(([lng, lat]) => ({
            latitude: lat,
            longitude: lng
          }))}
          strokeColor="#FF0000"
          strokeWidth={4}
          lineDashPattern={[1]}
          zIndex={1}
        />
      ))}
    </>
  );
};
---

FILE: C:/Users/lucas/Projects/calgary-transit-app/components/map/components/StopMarkers.tsx
---
// components/map/components/StopMarkers.tsx
import React, { memo, useEffect, useState } from 'react';
import { Marker, Callout } from 'react-native-maps';
import { Text, View, StyleSheet } from 'react-native';
import { Stop } from '@/types/map';

interface StopMarkersProps {
  stops: Stop[];
  routeId: string | undefined;
}

// Individual stop marker component
const StopMarker = memo(({ stop, routeId }: { stop: Stop; routeId: string | undefined }) => {
  // Start with tracksViewChanges true, then set to false after first render
  const [tracksChanges, setTracksChanges] = useState(true);
  
  useEffect(() => {
    // After the first render, disable tracking view changes
    const timer = setTimeout(() => {
      setTracksChanges(false);
    }, 500); // Give it time to render properly first
    
    return () => clearTimeout(timer);
  }, []);

  return (
    <Marker
      key={`${routeId}-stop-${stop.stop_id}`}
      coordinate={{
        latitude: stop.stop_lat,
        longitude: stop.stop_lon,
      }}
      zIndex={2}
      anchor={{ x: 0.5, y: 0.5 }}
      tracksViewChanges={tracksChanges}
    >
      <View style={styles.markerContainer}>
        <Text style={styles.markerText}>{stop.stop_sequence}</Text>
      </View>

      <Callout>
        <View style={styles.calloutContainer}>
          <Text style={styles.calloutTitle}>Stop #{stop.stop_sequence}</Text>
          <Text>ID: {stop.stop_id}</Text>
        </View>
      </Callout>
    </Marker>
  );
});

// Main component that renders all stop markers
export const StopMarkers: React.FC<StopMarkersProps> = memo(({ stops, routeId }) => {
  return (
    <>
      {stops.map((stop) => (
        <StopMarker 
          key={`${routeId}-stop-${stop.stop_id}`} 
          stop={stop} 
          routeId={routeId} 
        />
      ))}
    </>
  );
});

const styles = StyleSheet.create({
  markerContainer: {
    backgroundColor: '#FF0000',
    borderRadius: 0,
    padding: 6,
    borderWidth: 1,
    borderColor: 'white',
  },
  markerText: {
    color: 'white',
    fontWeight: 'bold',
    fontSize: 10,
    textAlign: 'center',
  },
  calloutContainer: {
    padding: 8,
    minWidth: 100,
  },
  calloutTitle: {
    fontWeight: 'bold',
    marginBottom: 4,
  }
});
---

FILE: C:/Users/lucas/Projects/calgary-transit-app/components/map/components/UserLocationMarker.tsx
---
// components/map/components/UserLocationMarker.tsx
import React from 'react';
import { Marker } from 'react-native-maps';
import { LocationObject } from 'expo-location';

interface UserLocationMarkerProps {
  location: LocationObject | null;
}

export const UserLocationMarker: React.FC<UserLocationMarkerProps> = ({ location }) => {
  if (!location) return null;

  return (
    <Marker
      coordinate={{
        latitude: location.coords.latitude,
        longitude: location.coords.longitude,
      }}
      title="You are here"
      description="Your current location"
      pinColor="blue"
    />
  );
};
---

FILE: C:/Users/lucas/Projects/calgary-transit-app/components/map/constants.ts
---
// components/map/constants.ts
import { Dimensions } from 'react-native';
import { LocationObject } from 'expo-location'; // Add this import

const { width, height } = Dimensions.get('window');
const ASPECT_RATIO = width / height;

const LATITUDE_DELTA = 0.0922;
const LONGITUDE_DELTA = 0.0922 * ASPECT_RATIO;

export const MAP_CONSTANTS = {
  LATITUDE_DELTA,
  LONGITUDE_DELTA,
  ZOOM_LEVELS: {
    FAR: 0.1,
    MEDIUM: 0.05,
    CLOSE: 0.02
  },
  initialRegion: (location: LocationObject | null) => ({
    latitude: location?.coords.latitude || 51.0447,
    longitude: location?.coords.longitude || -114.0719,
    latitudeDelta: LATITUDE_DELTA,
    longitudeDelta: LONGITUDE_DELTA,
  })
};

export const CLUSTERING_CONSTANTS = {
  MAX_CLUSTER_SIZE: {
    FAR: 20,      // More points allowed in clusters when zoomed out
    MEDIUM: 10,    // Medium amount of points for middle zoom
    CLOSE: 5       // Fewer points when zoomed in close
  },
  RADIUS: {
    FAR: 50,
    MEDIUM: 35,
    CLOSE: 20
  },

  // Size of the marker icon in pixels (approximate)
  MARKER_SIZE: {
    WIDTH: 40,
    HEIGHT: 40,
  },
  // Buffer zone around markers (in pixels) to prevent too-close positioning
  BUFFER: -20
};

---

FILE: C:/Users/lucas/Projects/calgary-transit-app/components/map/MapScreen.tsx
---
// MapScreen.tsx - Direct approach
import React, { useState, useRef, useEffect } from "react";
import { View, Button, Text } from "react-native";
import MapView, { PROVIDER_GOOGLE } from "react-native-maps";
import * as Location from 'expo-location';
import { useLocation } from "../../hooks/useLocation";
import { useTransitData } from "../../hooks/useTransitData";
import { useRouteData } from "../../hooks/useRouteData";
import { RadiusSelector } from "./RadiusSelector";
import { styles } from "./styles";
import { useMapClustering } from "./hooks/useMapClustering";
import { ClusterMarkers } from "./components/ClusterMarkers";
import { UserLocationMarker } from "./components/UserLocationMarker";
import { ErrorDisplay } from "./components/ErrorDisplay";
import { MAP_CONSTANTS } from "./constants";
import type { Region } from "./types";
import { RouteShape } from "./components/RouteShape";
import { Vehicle } from "@/types/vehicles";
import { StopMarkers } from "./components/StopMarkers";

const MapScreen = () => {
  const { location, errorMsg: locationError, refreshLocation } = useLocation();
  const [radius, setRadius] = useState<number>(1);
  const [region, setRegion] = useState<Region>(
    MAP_CONSTANTS.initialRegion(location)
  );
  const [selectedVehicle, setSelectedVehicle] = useState<Vehicle | null>(null);
  const [isLoadingRoute, setIsLoadingRoute] = useState<boolean>(false);
  const [manualLocation, setManualLocation] = useState<Location.LocationObject | null>(null);

  const mapRef = useRef<MapView>(null);
  const hasLoadedDataRef = useRef(false);

  // Use either the hook location or our manual location
  const effectiveLocation = location || manualLocation;

  const {
    filteredVehicles,
    isLoading,
    error: transitError,
    mappingError,
    refreshData,
  } = useTransitData({ location: effectiveLocation, radius });

  const {
    activeRouteId,
    routeShape,
    routeStops,
    loadRouteData,
    clearRouteData
  } = useRouteData();

  const clusters = useMapClustering(filteredVehicles, region);

  // Get location directly from the device if the hook isn't providing it
  useEffect(() => {
    if (!location && !manualLocation) {
      console.log("Attempting to get location directly");

      (async () => {
        try {
          // Check if we have permission
          const { status } = await Location.getForegroundPermissionsAsync();

          if (status !== 'granted') {
            console.log("No location permission");
            return;
          }

          // Get current position directly
          const currentLocation = await Location.getCurrentPositionAsync({
            accuracy: Location.Accuracy.Balanced
          });

          console.log("Got manual location:",
            currentLocation.coords.latitude.toFixed(6),
            currentLocation.coords.longitude.toFixed(6)
          );

          setManualLocation(currentLocation);
        } catch (error) {
          console.error("Error getting manual location:", error);
        }
      })();
    }
  }, [location, manualLocation]);

  const memoizedStopMarkers = React.useMemo(() => {
    if (routeStops && activeRouteId) {
      return <StopMarkers stops={routeStops} routeId={activeRouteId} />;
    }
    return null;
  }, [routeStops, activeRouteId]);

  // Load data when we have any location source
  useEffect(() => {
    if (effectiveLocation && !hasLoadedDataRef.current && !isLoading) {
      console.log("Location available (source: " + (location ? "hook" : "manual") + "), loading data");

      // Update map region
      const newRegion = {
        latitude: effectiveLocation.coords.latitude,
        longitude: effectiveLocation.coords.longitude,
        latitudeDelta: 0.02,
        longitudeDelta: 0.02,
      };

      setRegion(newRegion);

      if (mapRef.current) {
        mapRef.current.animateToRegion(newRegion, 1000);
      }

      // Load transit data
      refreshData();
      hasLoadedDataRef.current = true;
    }
  }, [effectiveLocation, isLoading, refreshData]);

  // Reset data loaded flag when radius changes
  useEffect(() => {
    hasLoadedDataRef.current = false;
  }, [radius]);

  const clearSelection = () => {
    setSelectedVehicle(null);
    clearRouteData();
    setIsLoadingRoute(false);
  };

  const handleVehicleSelect = async (vehicle: Vehicle) => {
    console.log("vehicle:", JSON.stringify(vehicle));
    setSelectedVehicle(vehicle);
    setIsLoadingRoute(true);
    try {
      await loadRouteData(vehicle.routeId);
    } finally {
      setIsLoadingRoute(false);
    }
  };

  const handleRefresh = async () => {
    if (isLoading) return;

    console.log("Manual refresh triggered");

    // Try to refresh location from hook
    await refreshLocation();

    // If hook location still not available, try to get it manually
    if (!location) {
      try {
        const currentLocation = await Location.getCurrentPositionAsync({
          accuracy: Location.Accuracy.Balanced
        });
        setManualLocation(currentLocation);
      } catch (error) {
        console.error("Error getting manual location during refresh:", error);
      }
    }

    // Refresh data regardless
    refreshData();
  };

  // Get map region from user location
  const onUserLocationChange = (event: any) => {
    // If we don't have location from hooks, use the map's user location
    if (!location && !manualLocation && event.nativeEvent.coordinate) {
      const { latitude, longitude } = event.nativeEvent.coordinate;
      console.log("Got location from map:", latitude.toFixed(6), longitude.toFixed(6));

      const mapLocation = {
        coords: {
          latitude,
          longitude,
          altitude: null,
          accuracy: null,
          altitudeAccuracy: null,
          heading: null,
          speed: null
        },
        timestamp: Date.now()
      };

      setManualLocation(mapLocation);
    }
  };

  return (
    <View style={styles.container}>
      <RadiusSelector radius={radius} onRadiusChange={setRadius} />

      {/* Add manual refresh button */}
      <View style={styles.refreshButton}>
        <Button
          title={isLoading ? "Loading..." : "Refresh Data"}
          onPress={handleRefresh}
          disabled={isLoading}
        />
        {!effectiveLocation && <Text style={styles.waitingText}>Waiting for location...</Text>}
      </View>

      <MapView
        ref={mapRef}
        provider={PROVIDER_GOOGLE}
        style={styles.map}
        initialRegion={region}
        showsUserLocation={true}
        showsMyLocationButton={true}
        showsCompass={true}
        onPress={clearSelection}
        onRegionChangeComplete={setRegion}
        onUserLocationChange={onUserLocationChange}
      >
        {routeShape && activeRouteId && (
          <RouteShape
            coordinates={routeShape}
            routeId={activeRouteId}
          />
        )}
        {memoizedStopMarkers}
        {effectiveLocation && <UserLocationMarker location={effectiveLocation} />}
        <ClusterMarkers
          onVehicleSelect={handleVehicleSelect}
          clusters={clusters}
          selectedVehicle={selectedVehicle}
          activeRouteId={activeRouteId}
          isLoadingRoute={isLoadingRoute}
        />
      </MapView>

      <ErrorDisplay locationError={locationError} transitError={transitError} />

      {/* Show loading indicator */}
      {isLoading && (
        <View style={styles.loadingOverlay}>
          <Text style={styles.loadingText}>Loading transit data...</Text>
        </View>
      )}
    </View>
  );
};

export default MapScreen;
---

FILE: C:/Users/lucas/Projects/calgary-transit-app/components/map/RadiusSelector.tsx
---
import React from 'react';
import { View } from 'react-native';
import { Picker } from '@react-native-picker/picker';
import { styles } from './styles';

interface RadiusSelectorProps {
  radius: number;
  onRadiusChange: (value: number) => void;
}

export const RadiusSelector: React.FC<RadiusSelectorProps> = ({
  radius,
  onRadiusChange,
}) => (
  <View style={styles.pickerContainer}>
    <Picker
      selectedValue={radius}
      style={styles.picker}
      onValueChange={(itemValue: number) => onRadiusChange(itemValue)}
    >
      <Picker.Item label="1 mile" value={1} />
      <Picker.Item label="2 miles" value={2} />
      <Picker.Item label="5 miles" value={5} />
      <Picker.Item label="10 miles" value={10} />
      <Picker.Item label="20 miles" value={20} />
      <Picker.Item label="All" value={999999} />
    </Picker>
  </View>
);
---

FILE: C:/Users/lucas/Projects/calgary-transit-app/components/map/styles.ts
---
import { StyleSheet } from 'react-native';

export const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  map: {
    width: '100%',
    height: '100%',
  },
  errorText: {
    position: 'absolute',
    top: 10,
    left: 10,
    right: 10,
    backgroundColor: 'rgba(255, 0, 0, 0.7)',
    padding: 10,
    color: 'white',
    borderRadius: 5,
  },
  pickerContainer: {
    position: 'absolute',
    top: 10,
    right: 10,
    zIndex: 1,
    backgroundColor: 'white',
    borderRadius: 5,
    width: 150,
  },
  picker: {
    height: 55,
    width: 150,
  },
  // Add to existing styles
loadingContainer: {
    position: 'absolute',
    top: '50%',
    left: '50%',
    transform: [{ translateX: -25 }, { translateY: -25 }],
    zIndex: 1,
  },
  refreshButton: {
    position: 'absolute',
    top: 100, // Adjust as needed
    right: 10,
    zIndex: 10,
    backgroundColor: 'rgba(255, 255, 255, 0.8)',
    padding: 8,
    borderRadius: 5,
  },
  waitingText: {
    color: 'red',
    fontSize: 12,
    textAlign: 'center',
    marginTop: 5,
  },
  loadingOverlay: {
    position: 'absolute',
    bottom: 20,
    alignSelf: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.7)',
    padding: 10,
    borderRadius: 5,
  },
  loadingText: {
    color: 'white',
    fontSize: 14,
  },
});

export const clusterStyles = StyleSheet.create({
  clusterContainer: {
    // backgroundColor: 'rgba(255, 0, 0, 0.7)',
    justifyContent: 'center',
    alignItems: 'center',
    borderWidth: 2,
    borderColor: 'white',
    // padding: 5,
    // borderRadius: '50%',
    // Add shadow for better visibility
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
  },
  clusterText: {
    color: 'white',
    fontWeight: 'bold',
    fontSize: 14,
    textAlign: 'center',
  },
});

---

FILE: C:/Users/lucas/Projects/calgary-transit-app/components/map/types.ts
---
// components/map/types.ts
import { Vehicle } from '../../types/vehicles';
  
  export interface Point {
    latitude: number;
    longitude: number;
    vehicle: Vehicle;
  }
  
  export interface Cluster {
    id: string;
    coordinate: {
      latitude: number;
      longitude: number;
    };
    numPoints: number;
    points: Array<Point>;
  }
  
  export interface Region {
    latitude: number;
    longitude: number;
    latitudeDelta: number;
    longitudeDelta: number;
  }


  
---

FILE: C:/Users/lucas/Projects/calgary-transit-app/components/markers/VehicleMarker.tsx
---
import React from 'react';
import { View, StyleSheet, ActivityIndicator } from 'react-native';
import { Marker } from 'react-native-maps';
import { Vehicle } from '../../types/vehicles';
import { BusIcon, TrainIcon, HandicapBusIcon } from '../icons/TransitIcons';

interface VehicleMarkerProps {
    vehicle: Vehicle;
    onSelect: (vehicle: Vehicle) => void;
    isSelected: boolean;
    isOnSelectedRoute: boolean | undefined;
    isLoading?: boolean;
    isAnyVehicleLoading?: boolean; // New prop to indicate if any vehicle is loading
}

const VehicleMarker: React.FC<VehicleMarkerProps> = ({ 
    vehicle, 
    onSelect, 
    isSelected, 
    isOnSelectedRoute,
    isLoading = false,
    isAnyVehicleLoading = false
}) => {
    // Determine color based on selection state
    const getColor = () => {
        if (isLoading) return '#FF3333';
        if (isAnyVehicleLoading && !isSelected) return '#FF6666'; // Pale red for all non-selected vehicles when any is loading
        if (isSelected) return '#FF0000'; // Red for selected vehicle
        if (isOnSelectedRoute === true) return '#FF0000'; // Red for vehicles on the same route
        if (isOnSelectedRoute === false) return '#FF6666'; // Pale red for others when a route is selected
        return '#FF0000'; // Default red when no selection
    };

    // Determine opacity based on selection state
    const getOpacity = () => {
        if (isLoading) return 0.8;
        if (isAnyVehicleLoading && !isSelected) return 0.5; // Lower opacity for all non-selected vehicles when any is loading
        if (isSelected) return 1; // Full opacity for selected vehicle
        if (isOnSelectedRoute === true) return 1; // Full opacity for vehicles on the same route
        if (isOnSelectedRoute === false) return 0.5; // Half opacity for others when a route is selected
        return 0.8; // Slightly transparent when no selection
    };

    const getVehicleIcon = () => {
        const color = getColor();
        switch (vehicle.vehicleType) {
            case 'TRAIN':
                return <TrainIcon size={40} color={color} />;
            case 'HANDICAP_BUS':
                return <HandicapBusIcon size={40} color={color} />;
            default:
                return <BusIcon size={40} color={color} />;
        }
    };

    const markerTitle = vehicle.routeId 
        ? `Route ${vehicle.routeId}`
        : 'Unknown Route';

    const opacity = getOpacity();

    // Determine if we should show the selection outline
    // Now includes both selected vehicle AND vehicles on the selected route
    const showSelectionOutline = !isLoading && !isAnyVehicleLoading && (isSelected || isOnSelectedRoute === true);

    return (
        <Marker
            key={vehicle.id}
            coordinate={{
                latitude: vehicle.latitude,
                longitude: vehicle.longitude,
            }}
            title={markerTitle}
            onPress={() => onSelect(vehicle)}
            anchor={{ x: 0.5, y: 0.5 }}
        >
            <View style={styles.markerContainer}>
                {/* Loading indicator that appears above the vehicle icon */}
                {isLoading && (
                    <View style={styles.loadingContainer}>
                        <View style={styles.indicatorBackground}>
                            <ActivityIndicator 
                                size="small" 
                                color="#FFFFFF" 
                                style={styles.indicator}
                            />
                        </View>
                    </View>
                )}
                
                {/* Vehicle icon with conditional white outline */}
                <View 
                    style={[
                        styles.iconContainer, 
                        { opacity },
                        showSelectionOutline && styles.selectedIconContainer
                    ]}
                >
                    {getVehicleIcon()}
                </View>
            </View>
        </Marker>
    );
};

const styles = StyleSheet.create({
    markerContainer: {
        alignItems: 'center',
        justifyContent: 'center',
        position: 'relative',
        height: 80, // Increased height to accommodate both elements
        width: 50,
    },
    loadingContainer: {
        position: 'absolute',
        top: 0, // Position at the top of the container
        width: 40,
        height: 40,
        justifyContent: 'center',
        alignItems: 'center',
        zIndex: 2, // Ensure it's above the vehicle icon
    },
    indicatorBackground: {
        width: 30,
        height: 30,
        borderRadius: 15,
        backgroundColor: 'rgba(255, 0, 0, 0.7)', // Semi-transparent red background
        justifyContent: 'center',
        alignItems: 'center',
    },
    indicator: {
        margin: 3,
    },
    iconContainer: {
        position: 'absolute',
        bottom: 0, // Position at the bottom of the container
        zIndex: 1,
        padding: 3, // Add padding to make room for the outline
    },
    selectedIconContainer: {
        borderRadius: 5,
        backgroundColor: 'rgb(255, 255, 255)', 
    }
});

export default VehicleMarker;
---

